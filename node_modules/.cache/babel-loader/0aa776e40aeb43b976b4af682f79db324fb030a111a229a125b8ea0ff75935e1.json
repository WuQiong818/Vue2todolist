{"ast":null,"code":"export default {\n  data() {\n    return {};\n  },\n  props: {\n    List: []\n  },\n  mounted() {\n    var timer = 0;\n    this.echartsset = setInterval(() => {\n      timer++;\n      this.getEchartData();\n      if (timer === 8) {\n        clearInterval(this.echartsset);\n      }\n    }, 1000);\n  },\n  methods: {\n    getEchartData() {\n      const chart = this.$refs.warn;\n      var color = [\"rgb(114, 178, 255)\", \"rgb(139, 102, 206)\", \"rgb(40, 136, 225)\", \"rgb(6, 219, 219)\"];\n      var warnlist = this.List;\n      // console.log(warnlist);\n      let legendname = warnlist.map(item => {\n        return item.name;\n      });\n      // console.log(legendname);\n      var legend = legendname;\n      var seriesData = warnlist;\n      if (chart) {\n        const myChart = this.$echarts.init(chart);\n        let option = {\n          backgroundColor: \"rgba(0,0,0,0)\",\n          // color: color,\n          title: {\n            text: \"问题预警\",\n            x: \"20%\",\n            // 问题预警的位置\n            y: \"center\",\n            textStyle: {\n              fontSize: 20,\n              color: \"white\"\n            }\n          },\n          tooltip: {\n            trigger: \"item\"\n          },\n          grid: {\n            top: \"15%\",\n            left: 0,\n            right: \"1%\",\n            bottom: 5,\n            containLabel: true\n          },\n          legend: {\n            orient: \"vertical\",\n            top: \"center\",\n            right: \"10%\",\n            // 提示的位置\n            icon: \"circle\",\n            textStyle: {\n              align: \"left\",\n              verticalAlign: \"middle\",\n              rich: {\n                name: {\n                  color: \"rgba(255,255,255)\",\n                  fontSize: 14\n                },\n                value: {\n                  color: \"rgba(255,255,255)\",\n                  fontSize: 14\n                },\n                rate: {\n                  color: \"rgba(255,255,255,0.9)\",\n                  fontSize: 12\n                }\n              }\n            },\n            data: legend,\n            formatter: name => {\n              if (seriesData.length) {\n                const item = seriesData.filter(item => item.name === name)[0];\n                return `{name|${name}：}{value| ${item.value}}`;\n              }\n            }\n          },\n          series: [{\n            name: \"问题预警\",\n            type: \"pie\",\n            center: [\"30%\", \"50%\"],\n            radius: [\"45%\", \"65%\"],\n            // hoverOffset: 30,\n            // clockwise: true,\n            // avoidLabelOverlap: true,\n            hoverOffset: 30,\n            itemStyle: {\n              normal: {\n                color: function (params) {\n                  return color[params.dataIndex];\n                }\n              }\n            },\n            label: {\n              normal: {\n                show: false,\n                position: \"center\",\n                formatter: \"{value|{c}}\\n{label|{b}}\",\n                rich: {\n                  value: {\n                    padding: 5,\n                    align: \"center\",\n                    verticalAlign: \"middle\",\n                    fontSize: 32\n                  },\n                  label: {\n                    align: \"center\",\n                    verticalAlign: \"middle\",\n                    fontSize: 16\n                  }\n                }\n              }\n              //将trigger的item显示在title处\n              // emphasis: {\n              //     show: true,\n              //     textStyle: {\n              //         fontSize: '12',\n              //     },\n              // },\n            },\n\n            labelLine: {\n              show: false,\n              length: 0,\n              length2: 0\n            },\n            data: seriesData\n          }]\n        };\n        myChart.setOption(option);\n        window.addEventListener(\"resize\", function () {\n          myChart.resize();\n        });\n      }\n      this.$on(\"hook:destroyed\", () => {\n        window.removeEventListener(\"resize\", function () {\n          myChart.resize();\n        });\n      });\n    }\n  }\n};","map":{"version":3,"names":["data","props","List","mounted","timer","echartsset","setInterval","getEchartData","clearInterval","methods","chart","$refs","warn","color","warnlist","legendname","map","item","name","legend","seriesData","myChart","$echarts","init","option","backgroundColor","title","text","x","y","textStyle","fontSize","tooltip","trigger","grid","top","left","right","bottom","containLabel","orient","icon","align","verticalAlign","rich","value","rate","formatter","length","filter","series","type","center","radius","hoverOffset","itemStyle","normal","params","dataIndex","label","show","position","padding","labelLine","length2","setOption","window","addEventListener","resize","$on","removeEventListener"],"sources":["src/pages/DiscountedConsumption.vue"],"sourcesContent":["<template>\r\n  <div class=\"warning\" ref=\"warn\"></div>\r\n</template>\r\n<style>\r\n.warning {\r\n  height: 100%;\r\n  width: 100%;\r\n}\r\n</style>\r\n<script>\r\nexport default {\r\n  data() {\r\n    return {};\r\n  },\r\n  props: {\r\n    List: [],\r\n  },\r\n  mounted() {\r\n    var timer = 0\r\n    this.echartsset = setInterval(() => {\r\n      timer++\r\n      this.getEchartData();\r\n      if(timer === 8){\r\n        clearInterval(this.echartsset)\r\n      }\r\n    }, 1000);\r\n    \r\n  },\r\n  methods: {\r\n    getEchartData() {\r\n      const chart = this.$refs.warn;\r\n      var color = [\r\n        \"rgb(114, 178, 255)\",\r\n        \"rgb(139, 102, 206)\",\r\n        \"rgb(40, 136, 225)\",\r\n        \"rgb(6, 219, 219)\",\r\n      ];\r\n      var warnlist = this.List;\r\n      // console.log(warnlist);\r\n      let legendname = warnlist.map((item) => {\r\n        return item.name;\r\n      });\r\n      // console.log(legendname);\r\n      var legend = legendname;\r\n \r\n      var seriesData = warnlist;\r\n \r\n      if (chart) {\r\n        const myChart = this.$echarts.init(chart);\r\n        let option = {\r\n          backgroundColor: \"rgba(0,0,0,0)\",\r\n          // color: color,\r\n          title: {\r\n            text: \"问题预警\",\r\n            x: \"20%\", // 问题预警的位置\r\n            y: \"center\",\r\n            textStyle: {\r\n              fontSize: 20,\r\n              color: \"white\",\r\n            },\r\n          },\r\n          tooltip: {\r\n            trigger: \"item\",\r\n          },\r\n          grid: {\r\n            top: \"15%\",\r\n            left: 0,\r\n            right: \"1%\",\r\n            bottom: 5,\r\n            containLabel: true,\r\n          },\r\n          legend: {\r\n            orient: \"vertical\",\r\n            top: \"center\",\r\n            right: \"10%\", // 提示的位置\r\n            icon: \"circle\",\r\n            textStyle: {\r\n              align: \"left\",\r\n              verticalAlign: \"middle\",\r\n              rich: {\r\n                name: {\r\n                  color: \"rgba(255,255,255)\",\r\n                  fontSize: 14,\r\n                },\r\n                value: {\r\n                  color: \"rgba(255,255,255)\",\r\n                  fontSize: 14,\r\n                },\r\n                rate: {\r\n                  color: \"rgba(255,255,255,0.9)\",\r\n                  fontSize: 12,\r\n                },\r\n              },\r\n            },\r\n            data: legend,\r\n            formatter: (name) => {\r\n              if (seriesData.length) {\r\n                const item = seriesData.filter((item) => item.name === name)[0];\r\n                return `{name|${name}：}{value| ${item.value}}`;\r\n              }\r\n            },\r\n          },\r\n          series: [\r\n            {\r\n              name: \"问题预警\",\r\n              type: \"pie\",\r\n              center: [\"30%\", \"50%\"],\r\n              radius: [\"45%\", \"65%\"],\r\n              // hoverOffset: 30,\r\n              // clockwise: true,\r\n              // avoidLabelOverlap: true,\r\n              hoverOffset: 30,\r\n \r\n              itemStyle: {\r\n                normal: {\r\n                  color: function (params) {\r\n                    return color[params.dataIndex];\r\n                  },\r\n                },\r\n              },\r\n              label: {\r\n                normal: {\r\n                  show: false,\r\n                  position: \"center\",\r\n                  formatter: \"{value|{c}}\\n{label|{b}}\",\r\n                  rich: {\r\n                    value: {\r\n                      padding: 5,\r\n                      align: \"center\",\r\n                      verticalAlign: \"middle\",\r\n                      fontSize: 32,\r\n                    },\r\n                    label: {\r\n                      align: \"center\",\r\n                      verticalAlign: \"middle\",\r\n                      fontSize: 16,\r\n                    },\r\n                  },\r\n                },\r\n                //将trigger的item显示在title处\r\n                // emphasis: {\r\n                //     show: true,\r\n                //     textStyle: {\r\n                //         fontSize: '12',\r\n                //     },\r\n                // },\r\n              },\r\n              labelLine: {\r\n                show: false,\r\n                length: 0,\r\n                length2: 0,\r\n              },\r\n              data: seriesData,\r\n            },\r\n          ],\r\n        };\r\n \r\n        myChart.setOption(option);\r\n        window.addEventListener(\"resize\", function () {\r\n          myChart.resize();\r\n        });\r\n      }\r\n      this.$on(\"hook:destroyed\", () => {\r\n        window.removeEventListener(\"resize\", function () {\r\n          myChart.resize();\r\n        });\r\n      });\r\n    },\r\n  },\r\n};\r\n</script>"],"mappings":"AAUA;EACAA,KAAA;IACA;EACA;EACAC,KAAA;IACAC,IAAA;EACA;EACAC,QAAA;IACA,IAAAC,KAAA;IACA,KAAAC,UAAA,GAAAC,WAAA;MACAF,KAAA;MACA,KAAAG,aAAA;MACA,IAAAH,KAAA;QACAI,aAAA,MAAAH,UAAA;MACA;IACA;EAEA;EACAI,OAAA;IACAF,cAAA;MACA,MAAAG,KAAA,QAAAC,KAAA,CAAAC,IAAA;MACA,IAAAC,KAAA,IACA,sBACA,sBACA,qBACA,mBACA;MACA,IAAAC,QAAA,QAAAZ,IAAA;MACA;MACA,IAAAa,UAAA,GAAAD,QAAA,CAAAE,GAAA,CAAAC,IAAA;QACA,OAAAA,IAAA,CAAAC,IAAA;MACA;MACA;MACA,IAAAC,MAAA,GAAAJ,UAAA;MAEA,IAAAK,UAAA,GAAAN,QAAA;MAEA,IAAAJ,KAAA;QACA,MAAAW,OAAA,QAAAC,QAAA,CAAAC,IAAA,CAAAb,KAAA;QACA,IAAAc,MAAA;UACAC,eAAA;UACA;UACAC,KAAA;YACAC,IAAA;YACAC,CAAA;YAAA;YACAC,CAAA;YACAC,SAAA;cACAC,QAAA;cACAlB,KAAA;YACA;UACA;UACAmB,OAAA;YACAC,OAAA;UACA;UACAC,IAAA;YACAC,GAAA;YACAC,IAAA;YACAC,KAAA;YACAC,MAAA;YACAC,YAAA;UACA;UACApB,MAAA;YACAqB,MAAA;YACAL,GAAA;YACAE,KAAA;YAAA;YACAI,IAAA;YACAX,SAAA;cACAY,KAAA;cACAC,aAAA;cACAC,IAAA;gBACA1B,IAAA;kBACAL,KAAA;kBACAkB,QAAA;gBACA;gBACAc,KAAA;kBACAhC,KAAA;kBACAkB,QAAA;gBACA;gBACAe,IAAA;kBACAjC,KAAA;kBACAkB,QAAA;gBACA;cACA;YACA;YACA/B,IAAA,EAAAmB,MAAA;YACA4B,SAAA,EAAA7B,IAAA;cACA,IAAAE,UAAA,CAAA4B,MAAA;gBACA,MAAA/B,IAAA,GAAAG,UAAA,CAAA6B,MAAA,CAAAhC,IAAA,IAAAA,IAAA,CAAAC,IAAA,KAAAA,IAAA;gBACA,gBAAAA,IAAA,aAAAD,IAAA,CAAA4B,KAAA;cACA;YACA;UACA;UACAK,MAAA,GACA;YACAhC,IAAA;YACAiC,IAAA;YACAC,MAAA;YACAC,MAAA;YACA;YACA;YACA;YACAC,WAAA;YAEAC,SAAA;cACAC,MAAA;gBACA3C,KAAA,WAAAA,CAAA4C,MAAA;kBACA,OAAA5C,KAAA,CAAA4C,MAAA,CAAAC,SAAA;gBACA;cACA;YACA;YACAC,KAAA;cACAH,MAAA;gBACAI,IAAA;gBACAC,QAAA;gBACAd,SAAA;gBACAH,IAAA;kBACAC,KAAA;oBACAiB,OAAA;oBACApB,KAAA;oBACAC,aAAA;oBACAZ,QAAA;kBACA;kBACA4B,KAAA;oBACAjB,KAAA;oBACAC,aAAA;oBACAZ,QAAA;kBACA;gBACA;cACA;cACA;cACA;cACA;cACA;cACA;cACA;cACA;YACA;;YACAgC,SAAA;cACAH,IAAA;cACAZ,MAAA;cACAgB,OAAA;YACA;YACAhE,IAAA,EAAAoB;UACA;QAEA;QAEAC,OAAA,CAAA4C,SAAA,CAAAzC,MAAA;QACA0C,MAAA,CAAAC,gBAAA;UACA9C,OAAA,CAAA+C,MAAA;QACA;MACA;MACA,KAAAC,GAAA;QACAH,MAAA,CAAAI,mBAAA;UACAjD,OAAA,CAAA+C,MAAA;QACA;MACA;IACA;EACA;AACA"},"metadata":{},"sourceType":"module","externalDependencies":[]}