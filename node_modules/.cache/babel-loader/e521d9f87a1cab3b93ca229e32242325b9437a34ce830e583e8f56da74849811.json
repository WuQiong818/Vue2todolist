{"ast":null,"code":"import { mapMutations } from \"vuex\";\nexport default {\n  name: \"todoItem\",\n  /* props中的内容，可以直接在模板中进行使用.\r\n  我如果想要最大程度上去复用这一个组件，\r\n  那么我应该做的就是设计尽可能多的参数，去自定义我的组件\r\n  */\n  /* \r\n  finished、unfinished\r\n  \"finishState\"\r\n  */\n\n  props: [\"todoObj\"],\n  data() {\n    return {};\n  },\n  computed: {\n    // 这里封装的数据发生更改，不在组件内进行封装，而是有封装了一个大的todolist\n    // 直接通过计算，返回一个确定的boolean值\n    // judgeFinishState() {\n    //   const todoObj = this.$props.todoObj;\n    //   const finishState = this.$props.finishState; //我展示的类型是已完成和未完成\n    //   if (finishState == \"finished\") {\n    //     console.log(\"finished\",todoObj.isFinished);\n    //     return todoObj.isFinished;\n    //   }\n    //   if(finishState == \"unfinished\"){\n    //     console.log(\"unfinished\",todoObj.isFinished);\n    //     return !todoObj.isFinished\n    //   }\n    // },\n  },\n  methods: {\n    //通过map方法结构之后，可以直接通过this.进行访问\n    ...mapMutations(\"todolist\", [\"EDIT\", \"ALTER\", \"DELETE\", \"ALTERCHECKBOX\"]),\n    edit(todoObj) {\n      this.EDIT(todoObj);\n      this.$nextTick(function () {\n        this.$refs.inputBox.focus();\n      });\n    },\n    handerBlur(todoObj, e) {\n      todoObj.isEdit = false;\n      if (!e.target.value.trim()) {\n        return alter(\"输入不能为空\");\n      }\n      todoObj.todoThing.title = e.target.value;\n      this.ALTER(todoObj);\n    },\n    todoDeleted(todoObj) {\n      if (confirm(\"确定删除该\" + todoObj.todoThing.title + \"吗?\")) {\n        this.DELETE(todoObj);\n      }\n    }\n  },\n  mounted() {\n    console.log(\"todoItem\", this);\n  }\n};","map":{"version":3,"names":["mapMutations","name","props","data","computed","methods","edit","todoObj","EDIT","$nextTick","$refs","inputBox","focus","handerBlur","e","isEdit","target","value","trim","alter","todoThing","title","ALTER","todoDeleted","confirm","DELETE","mounted","console","log"],"sources":["src/components/TodoItem.vue"],"sourcesContent":["<template>\r\n  <!-- v-show=\"judgeFinishState\" -->\r\n  <div class=\"todoItem\">\r\n    <label>\r\n      <input\r\n        class=\"checkBox\"\r\n        type=\"checkbox\"\r\n        @change=\"ALTERCHECKBOX(todoObj)\"\r\n        :checked=\"todoObj.isFinished\"\r\n      />\r\n      <span v-show=\"!todoObj.isEdit\">{{ todoObj.todoThing.title }}</span>\r\n      <input\r\n        class=\"alterBox\"\r\n        v-show=\"todoObj.isEdit\"\r\n        type=\"text\"\r\n        :value=\"todoObj.todoThing.title\"\r\n        @blur=\"handerBlur(todoObj, $event)\"\r\n        ref=\"inputBox\"\r\n      />\r\n    </label>\r\n    <div class=\"operatingButton\">\r\n      <el-button type=\"primary\" @click=\"edit(todoObj)\">编辑</el-button>\r\n      <el-button type=\"danger\" @click=\"todoDeleted(todoObj)\">删除</el-button>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport { mapMutations } from \"vuex\";\r\nexport default {\r\n  name: \"todoItem\",\r\n  /* props中的内容，可以直接在模板中进行使用.\r\n  我如果想要最大程度上去复用这一个组件，\r\n  那么我应该做的就是设计尽可能多的参数，去自定义我的组件\r\n  */\r\n  /* \r\nfinished、unfinished\r\n\"finishState\"\r\n*/\r\n\r\n  props: [\"todoObj\",],\r\n  data() {\r\n    return {};\r\n  },\r\n  computed: {\r\n    // 这里封装的数据发生更改，不在组件内进行封装，而是有封装了一个大的todolist\r\n    // 直接通过计算，返回一个确定的boolean值\r\n    // judgeFinishState() {\r\n    //   const todoObj = this.$props.todoObj;\r\n    //   const finishState = this.$props.finishState; //我展示的类型是已完成和未完成\r\n    //   if (finishState == \"finished\") {\r\n    //     console.log(\"finished\",todoObj.isFinished);\r\n    //     return todoObj.isFinished;\r\n    //   }\r\n    //   if(finishState == \"unfinished\"){\r\n    //     console.log(\"unfinished\",todoObj.isFinished);\r\n    //     return !todoObj.isFinished\r\n    //   }\r\n    // },\r\n  },\r\n  methods: {\r\n    //通过map方法结构之后，可以直接通过this.进行访问\r\n    ...mapMutations(\"todolist\", [\"EDIT\", \"ALTER\", \"DELETE\", \"ALTERCHECKBOX\"]),\r\n\r\n    edit(todoObj) {\r\n      this.EDIT(todoObj);\r\n      this.$nextTick(function () {\r\n        this.$refs.inputBox.focus();\r\n      });\r\n    },\r\n    handerBlur(todoObj, e) {\r\n      todoObj.isEdit = false;\r\n      if (!e.target.value.trim()){ return alter(\"输入不能为空\");\r\n    }\r\n      todoObj.todoThing.title = e.target.value;\r\n      this.ALTER(todoObj);\r\n    },\r\n    todoDeleted(todoObj) {\r\n      if (confirm(\"确定删除该\" + todoObj.todoThing.title + \"吗?\")) {\r\n        this.DELETE(todoObj);\r\n      }\r\n    },\r\n  },\r\n\r\n  mounted() {\r\n    console.log(\"todoItem\", this);\r\n  },\r\n};\r\n</script>\r\n\r\n<style scoped>\r\n.todoItem {\r\n  position: relative;\r\n  width: 95%;\r\n  height: 50px;\r\n  line-height: 50px;\r\n  background-color: #c8eae9;\r\n  margin: 10px 20px;\r\n  padding: 0px 10px;\r\n  font-size: 20px;\r\n}\r\n.todoItem .checkBox {\r\n  float: left;\r\n  margin-top: 16px;\r\n  margin-right: 15px;\r\n  width: 25px;\r\n  height: 20px;\r\n}\r\n.operatingButton {\r\n  float: left;\r\n  position: absolute;\r\n  top: -2px;\r\n  right: 7px;\r\n}\r\n\r\n.alterBox {\r\n  position: absolute;\r\n  top: 0px;\r\n  font-size: 20px;\r\n  height: 46px;\r\n  line-height: 45px;\r\n}\r\n\r\n/* ----------Element-UI-------------------- */\r\n.el-button {\r\n  padding: 12px 15px;\r\n}\r\n</style>"],"mappings":"AA4BA,SAAAA,YAAA;AACA;EACAC,IAAA;EACA;AACA;AACA;AACA;EACA;AACA;AACA;AACA;;EAEAC,KAAA;EACAC,KAAA;IACA;EACA;EACAC,QAAA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;EAAA,CACA;EACAC,OAAA;IACA;IACA,GAAAL,YAAA;IAEAM,KAAAC,OAAA;MACA,KAAAC,IAAA,CAAAD,OAAA;MACA,KAAAE,SAAA;QACA,KAAAC,KAAA,CAAAC,QAAA,CAAAC,KAAA;MACA;IACA;IACAC,WAAAN,OAAA,EAAAO,CAAA;MACAP,OAAA,CAAAQ,MAAA;MACA,KAAAD,CAAA,CAAAE,MAAA,CAAAC,KAAA,CAAAC,IAAA;QAAA,OAAAC,KAAA;MACA;MACAZ,OAAA,CAAAa,SAAA,CAAAC,KAAA,GAAAP,CAAA,CAAAE,MAAA,CAAAC,KAAA;MACA,KAAAK,KAAA,CAAAf,OAAA;IACA;IACAgB,YAAAhB,OAAA;MACA,IAAAiB,OAAA,WAAAjB,OAAA,CAAAa,SAAA,CAAAC,KAAA;QACA,KAAAI,MAAA,CAAAlB,OAAA;MACA;IACA;EACA;EAEAmB,QAAA;IACAC,OAAA,CAAAC,GAAA;EACA;AACA"},"metadata":{},"sourceType":"module","externalDependencies":[]}