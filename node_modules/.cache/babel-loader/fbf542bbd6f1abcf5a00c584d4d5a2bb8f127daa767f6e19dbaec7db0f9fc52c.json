{"ast":null,"code":"import { mapMutations } from \"vuex\";\nexport default {\n  name: \"todoItem\",\n  /* props中的内容，可以直接在模板中进行使用.\r\n  我如果想要最大程度上去复用这一个组件，\r\n  那么我应该做的就是设计尽可能多的参数，去自定义我的组件\r\n  */\n  /* \r\n  finished、unfinished\r\n  */\n\n  props: [\"todoObj\", \"FinishState\"],\n  data() {\n    return {};\n  },\n  computed: {\n    // 直接通过计算，返回一个确定的boolean值\n    finishState() {\n      const todoObj = this.$props.todoObj;\n      const type = this.$props.type; //我展示的类型是已完成和未完成\n      if (type == \"isFinshed\") {}\n      console.log(\"计算出来的展示结果\", todoObj[type]);\n      return todoObj[type];\n    }\n  },\n  methods: {\n    //通过map方法结构之后，可以直接通过this.进行访问\n    ...mapMutations(\"todolist\", [\"EDIT\", \"ALTER\", \"DELETE\", \"ALTERCHECKBOX\"]),\n    edit(todoObj) {\n      this.EDIT(todoObj);\n      this.$nextTick(function () {\n        this.$refs.inputBox.focus();\n      });\n    },\n    handerBlur(todoObj, e) {\n      console.log(\"失去焦点了\");\n      todoObj.isEdit = false;\n      if (!e.target.value.trim()) return alter(\"输入不能为空\");\n      todoObj.todoThing.title = e.target.value;\n      this.ALTER(todoObj);\n    },\n    todoDeleted(todoObj) {\n      if (confirm(\"确定删除该\" + todoObj.todoThing.title + \"吗?\")) {\n        this.DELETE(todoObj);\n      }\n    }\n  },\n  mounted() {\n    console.log(\"todoItem\", this);\n  }\n};","map":{"version":3,"names":["mapMutations","name","props","data","computed","finishState","todoObj","$props","type","console","log","methods","edit","EDIT","$nextTick","$refs","inputBox","focus","handerBlur","e","isEdit","target","value","trim","alter","todoThing","title","ALTER","todoDeleted","confirm","DELETE","mounted"],"sources":["src/components/TodoItem.vue"],"sourcesContent":["<template>\r\n  <div class=\"todoItem\" v-if=\"DisplayType\">\r\n    <label>\r\n      <input\r\n        class=\"checkBox\"\r\n        type=\"checkbox\"\r\n        @change=\"ALTERCHECKBOX(todoObj)\"\r\n        :checked=\"todoObj.isFinished\"\r\n      />\r\n      <span v-show=\"!todoObj.isEdit\">{{ todoObj.todoThing.title }}</span>\r\n      <input\r\n        class=\"alterBox\"\r\n        v-show=\"todoObj.isEdit\"\r\n        type=\"text\"\r\n        :value=\"todoObj.todoThing.title\"\r\n        @blur=\"handerBlur(todoObj, $event)\"\r\n        ref=\"inputBox\"\r\n      />\r\n    </label>\r\n    <div class=\"operatingButton\">\r\n      <el-button type=\"primary\" @click=\"edit(todoObj)\">编辑</el-button>\r\n      <el-button type=\"danger\" @click=\"todoDeleted(todoObj)\">删除</el-button>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport { mapMutations } from \"vuex\";\r\nexport default {\r\n  name: \"todoItem\",\r\n  /* props中的内容，可以直接在模板中进行使用.\r\n  我如果想要最大程度上去复用这一个组件，\r\n  那么我应该做的就是设计尽可能多的参数，去自定义我的组件\r\n  */\r\n/* \r\nfinished、unfinished\r\n*/\r\n\r\n\r\n  props: [\"todoObj\", \"FinishState\"],\r\n  data() {\r\n    return {};\r\n  },\r\n  computed: {\r\n    // 直接通过计算，返回一个确定的boolean值\r\n    finishState() {\r\n      const todoObj = this.$props.todoObj;\r\n      const type = this.$props.type; //我展示的类型是已完成和未完成\r\n      if (type == \"isFinshed\") {\r\n      }\r\n      console.log(\"计算出来的展示结果\", todoObj[type]);\r\n      return todoObj[type];\r\n    },\r\n  },\r\n  methods: {\r\n    //通过map方法结构之后，可以直接通过this.进行访问\r\n    ...mapMutations(\"todolist\", [\"EDIT\", \"ALTER\", \"DELETE\", \"ALTERCHECKBOX\"]),\r\n\r\n    edit(todoObj) {\r\n      this.EDIT(todoObj);\r\n      this.$nextTick(function () {\r\n        this.$refs.inputBox.focus();\r\n      });\r\n    },\r\n    handerBlur(todoObj, e) {\r\n      console.log(\"失去焦点了\");\r\n      todoObj.isEdit = false;\r\n      if (!e.target.value.trim()) return alter(\"输入不能为空\");\r\n      todoObj.todoThing.title = e.target.value;\r\n      this.ALTER(todoObj);\r\n    },\r\n    todoDeleted(todoObj) {\r\n      if (confirm(\"确定删除该\" + todoObj.todoThing.title + \"吗?\")) {\r\n        this.DELETE(todoObj);\r\n      }\r\n    },\r\n  },\r\n\r\n  mounted() {\r\n    console.log(\"todoItem\", this);\r\n  },\r\n};\r\n</script>\r\n\r\n<style scoped>\r\n.todoItem {\r\n  position: relative;\r\n  width: 95%;\r\n  height: 50px;\r\n  line-height: 50px;\r\n  background-color: #c8eae9;\r\n  margin: 10px 20px;\r\n  padding: 0px 10px;\r\n  font-size: 20px;\r\n}\r\n.todoItem .checkBox {\r\n  float: left;\r\n  margin-top: 16px;\r\n  margin-right: 15px;\r\n  width: 25px;\r\n  height: 20px;\r\n}\r\n.operatingButton {\r\n  float: left;\r\n  position: absolute;\r\n  top: -2px;\r\n  right: 7px;\r\n}\r\n.el-button {\r\n  padding: 12px 15px;\r\n}\r\n.alterBox {\r\n  position: absolute;\r\n  top: 0px;\r\n  font-size: 20px;\r\n  height: 46px;\r\n  line-height: 45px;\r\n}\r\n</style>"],"mappings":"AA2BA,SAAAA,YAAA;AACA;EACAC,IAAA;EACA;AACA;AACA;AACA;EACA;AACA;AACA;;EAGAC,KAAA;EACAC,KAAA;IACA;EACA;EACAC,QAAA;IACA;IACAC,YAAA;MACA,MAAAC,OAAA,QAAAC,MAAA,CAAAD,OAAA;MACA,MAAAE,IAAA,QAAAD,MAAA,CAAAC,IAAA;MACA,IAAAA,IAAA,kBACA;MACAC,OAAA,CAAAC,GAAA,cAAAJ,OAAA,CAAAE,IAAA;MACA,OAAAF,OAAA,CAAAE,IAAA;IACA;EACA;EACAG,OAAA;IACA;IACA,GAAAX,YAAA;IAEAY,KAAAN,OAAA;MACA,KAAAO,IAAA,CAAAP,OAAA;MACA,KAAAQ,SAAA;QACA,KAAAC,KAAA,CAAAC,QAAA,CAAAC,KAAA;MACA;IACA;IACAC,WAAAZ,OAAA,EAAAa,CAAA;MACAV,OAAA,CAAAC,GAAA;MACAJ,OAAA,CAAAc,MAAA;MACA,KAAAD,CAAA,CAAAE,MAAA,CAAAC,KAAA,CAAAC,IAAA,WAAAC,KAAA;MACAlB,OAAA,CAAAmB,SAAA,CAAAC,KAAA,GAAAP,CAAA,CAAAE,MAAA,CAAAC,KAAA;MACA,KAAAK,KAAA,CAAArB,OAAA;IACA;IACAsB,YAAAtB,OAAA;MACA,IAAAuB,OAAA,WAAAvB,OAAA,CAAAmB,SAAA,CAAAC,KAAA;QACA,KAAAI,MAAA,CAAAxB,OAAA;MACA;IACA;EACA;EAEAyB,QAAA;IACAtB,OAAA,CAAAC,GAAA;EACA;AACA"},"metadata":{},"sourceType":"module","externalDependencies":[]}