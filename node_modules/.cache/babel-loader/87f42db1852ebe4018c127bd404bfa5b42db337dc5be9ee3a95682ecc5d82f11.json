{"ast":null,"code":"export default {\n  data() {\n    return {};\n  },\n  mounted() {\n    this.handleYResize();\n    this.handleXResize();\n  },\n  methods: {\n    handleYResize() {\n      const box = document.getElementsByClassName(\"box\");\n      const left = document.getElementsByClassName(\"left\");\n      const resize = document.getElementsByClassName(\"y-resize\");\n      const right = document.getElementsByClassName(\"right\");\n      for (let i = 0; i < resize.length; i++) {\n        // 鼠标按下事件\n        resize[i].onmousedown = function (e) {\n          // 颜色改变提醒\n          resize[i].style.background = \"#818181\";\n          const startX = e.clientX;\n          resize[i].left = resize[i].offsetLeft;\n          // 鼠标拖动事件\n          document.onmousemove = function (e) {\n            const endX = e.clientX;\n            let moveLen = resize[i].left + (endX - startX); // （endX-startX）=移动的距离。resize[i].left+移动的距离=左侧最终的高度\n            const maxT = box[i].clientWidth - resize[i].offsetWidth; // 容器宽度 - 左边区域的宽度 = 右边区域的宽度\n            if (moveLen < 30) moveLen = 30; // left最小宽度度为30px\n            if (moveLen > maxT - 30) moveLen = maxT - 30; // right最小宽度度为30px\n\n            resize[i].style.left = moveLen; // 设置left区域的宽度\n            for (let j = 0; j < left.length; j++) {\n              left[j].style.width = moveLen + \"px\";\n              right[j].style.width = box[i].clientWidth - moveLen - 10 + \"px\";\n            }\n          };\n          // 鼠标松开事件\n          document.onmouseup = function (evt) {\n            // 颜色恢复\n            resize[i].style.background = \"#C0C4CC\";\n            document.onmousemove = null;\n            document.onmouseup = null;\n            resize[i].releaseCapture && resize[i].releaseCapture(); // 当你不在需要继续获得鼠标消息就要应该调用ReleaseCapture()释放掉\n          };\n\n          resize[i].setCapture && resize[i].setCapture(); // 该函数在属于当前线程的指定窗口里设置鼠标捕获\n          return false;\n        };\n      }\n    },\n    handleXResize() {\n      const box = document.getElementsByClassName(\"box\");\n      const top = document.getElementsByClassName(\"top\");\n      const resize = document.getElementsByClassName(\"x-resize\");\n      const bottom = document.getElementsByClassName(\"bottom\");\n      for (let i = 0; i < resize.length; i++) {\n        // 鼠标按下事件\n        resize[i].onmousedown = function (e) {\n          // 颜色改变提醒\n          resize[i].style.background = \"#818181\";\n          const startY = e.clientY;\n          resize[i].top = top[i].offsetHeight;\n          // 鼠标拖动事件\n          document.onmousemove = function (e) {\n            const endY = e.clientY;\n            let moveLen = resize[i].top + (endY - startY); // （endY-startY）=移动的距离。resize[i].top+移动的距离=上部最终的高度\n            const maxT = box[i].clientHeight - resize[i].offsetHeight; // 容器宽度 - 左边区域的宽度 = 右边区域的宽度\n            if (moveLen < 30) moveLen = 30; // top最小高度度为30px\n            if (moveLen > maxT - 30) moveLen = maxT - 30; // bottom最小高度度为30px\n\n            resize[i].style.height = moveLen; // 设置top区域的高度\n            for (let j = 0; j < top.length; j++) {\n              top[j].style.height = moveLen + \"px\";\n              bottom[j].style.height = box[i].clientHeight - moveLen - 10 + \"px\";\n            }\n          };\n          // 鼠标松开事件\n          document.onmouseup = function (evt) {\n            // 颜色恢复\n            resize[i].style.background = \"#C0C4CC\";\n            document.onmousemove = null;\n            document.onmouseup = null;\n            resize[i].releaseCapture && resize[i].releaseCapture(); // 当你不在需要继续获得鼠标消息就要应该调用ReleaseCapture()释放掉\n          };\n\n          resize[i].setCapture && resize[i].setCapture(); // 该函数在属于当前线程的指定窗口里设置鼠标捕获\n          return false;\n        };\n      }\n    }\n  }\n};","map":{"version":3,"names":["data","mounted","handleYResize","handleXResize","methods","box","document","getElementsByClassName","left","resize","right","i","length","onmousedown","e","style","background","startX","clientX","offsetLeft","onmousemove","endX","moveLen","maxT","clientWidth","offsetWidth","j","width","onmouseup","evt","releaseCapture","setCapture","top","bottom","startY","clientY","offsetHeight","endY","clientHeight","height"],"sources":["src/pages/FourQuadrant.vue"],"sourcesContent":["<template>\r\n  <div>\r\n    <h1>FourQuadrant</h1>\r\n    <div class=\"box\">\r\n      <div class=\"left\" />\r\n      <div class=\"y-resize\" />\r\n      <div class=\"right\">\r\n        <div class=\"top\" />\r\n        <div class=\"x-resize\" />\r\n        <div class=\"bottom\" />\r\n      </div>\r\n    </div>\r\n  </div>\r\n</template>\r\n  \r\n<script>\r\nexport default {\r\n  data() {\r\n    return {};\r\n  },\r\n  mounted() {\r\n    this.handleYResize();\r\n    this.handleXResize();\r\n  },\r\n  methods: {\r\n    handleYResize() {\r\n      const box = document.getElementsByClassName(\"box\");\r\n      const left = document.getElementsByClassName(\"left\");\r\n      const resize = document.getElementsByClassName(\"y-resize\");\r\n      const right = document.getElementsByClassName(\"right\");\r\n      for (let i = 0; i < resize.length; i++) {\r\n        // 鼠标按下事件\r\n        resize[i].onmousedown = function (e) {\r\n          // 颜色改变提醒\r\n          resize[i].style.background = \"#818181\";\r\n          const startX = e.clientX;\r\n          resize[i].left = resize[i].offsetLeft;\r\n          // 鼠标拖动事件\r\n          document.onmousemove = function (e) {\r\n            const endX = e.clientX;\r\n            let moveLen = resize[i].left + (endX - startX); // （endX-startX）=移动的距离。resize[i].left+移动的距离=左侧最终的高度\r\n            const maxT = box[i].clientWidth - resize[i].offsetWidth; // 容器宽度 - 左边区域的宽度 = 右边区域的宽度\r\n            if (moveLen < 30) moveLen = 30; // left最小宽度度为30px\r\n            if (moveLen > maxT - 30) moveLen = maxT - 30; // right最小宽度度为30px\r\n\r\n            resize[i].style.left = moveLen; // 设置left区域的宽度\r\n            for (let j = 0; j < left.length; j++) {\r\n              left[j].style.width = moveLen + \"px\";\r\n              right[j].style.width = box[i].clientWidth - moveLen - 10 + \"px\";\r\n            }\r\n          };\r\n          // 鼠标松开事件\r\n          document.onmouseup = function (evt) {\r\n            // 颜色恢复\r\n            resize[i].style.background = \"#C0C4CC\";\r\n            document.onmousemove = null;\r\n            document.onmouseup = null;\r\n            resize[i].releaseCapture && resize[i].releaseCapture(); // 当你不在需要继续获得鼠标消息就要应该调用ReleaseCapture()释放掉\r\n          };\r\n          resize[i].setCapture && resize[i].setCapture(); // 该函数在属于当前线程的指定窗口里设置鼠标捕获\r\n          return false;\r\n        };\r\n      }\r\n    },\r\n    handleXResize() {\r\n      const box = document.getElementsByClassName(\"box\");\r\n      const top = document.getElementsByClassName(\"top\");\r\n      const resize = document.getElementsByClassName(\"x-resize\");\r\n      const bottom = document.getElementsByClassName(\"bottom\");\r\n      for (let i = 0; i < resize.length; i++) {\r\n        // 鼠标按下事件\r\n        resize[i].onmousedown = function (e) {\r\n          // 颜色改变提醒\r\n          resize[i].style.background = \"#818181\";\r\n          const startY = e.clientY;\r\n          resize[i].top = top[i].offsetHeight;\r\n          // 鼠标拖动事件\r\n          document.onmousemove = function (e) {\r\n            const endY = e.clientY;\r\n            let moveLen = resize[i].top + (endY - startY); // （endY-startY）=移动的距离。resize[i].top+移动的距离=上部最终的高度\r\n            const maxT = box[i].clientHeight - resize[i].offsetHeight; // 容器宽度 - 左边区域的宽度 = 右边区域的宽度\r\n            if (moveLen < 30) moveLen = 30; // top最小高度度为30px\r\n            if (moveLen > maxT - 30) moveLen = maxT - 30; // bottom最小高度度为30px\r\n\r\n            resize[i].style.height = moveLen; // 设置top区域的高度\r\n            for (let j = 0; j < top.length; j++) {\r\n              top[j].style.height = moveLen + \"px\";\r\n              bottom[j].style.height =\r\n                box[i].clientHeight - moveLen - 10 + \"px\";\r\n            }\r\n          };\r\n          // 鼠标松开事件\r\n          document.onmouseup = function (evt) {\r\n            // 颜色恢复\r\n            resize[i].style.background = \"#C0C4CC\";\r\n            document.onmousemove = null;\r\n            document.onmouseup = null;\r\n            resize[i].releaseCapture && resize[i].releaseCapture(); // 当你不在需要继续获得鼠标消息就要应该调用ReleaseCapture()释放掉\r\n          };\r\n          resize[i].setCapture && resize[i].setCapture(); // 该函数在属于当前线程的指定窗口里设置鼠标捕获\r\n          return false;\r\n        };\r\n      }\r\n    },\r\n  },\r\n};\r\n</script>\r\n  \r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}